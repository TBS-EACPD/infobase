/*color constants*/
$primaryColor: #26374a;
$secondaryColor: #2c70c9;
$tertiaryColor: #8c949e; /* this one is used lots at varying alpha/darkness levels, should stay grey */

$backgroundColor: #fff;
$highlightColor: #da3a38;
$separatorColor: #bbc1c9;

$buttonPrimaryColor: #2c70c9;
$buttonSecondaryColor: #76a4df;

$textColor: #333;
$textLightColor: #fff;
$textGreen: #008000;
$textRed: #cc0000;

$linkColor: #2b438c;
$linkFocusColor: #0535d2;
$linkVisitedColor: #7834bc;

$highlightPaleColor: #ffa8a8;
$highlightOrangeColor: #e89a40;
$highlightDarkColor: #b12320;

/* media breakpoints
  .98px is used for styling consistancy reasons.
  Previously, the values were rounded down.
  In the odd event that a screen size lied right between 
  the max and min, (ex: a screen that scaled by a non-int multiplier), the styling
  for the device could take neither max-width and min-width styling (ex: screen 
  width that lied between 575px and 576px).
  Now, it should not be possible (by likelyhood) for any device to take on 0 media queries.
  .98 is also used because safari has a rounding bug causing
  .99 to treated as an exact value
*/
$minSmallDevice: 576px;
$maxSmallDevice: 575.98px;
$minMediumDevice: 768px;
$maxMediumDevice: 767.98px;
$minLargeDevice: 992px;
$maxLargeDevice: 991.98px;
$minExtraLargeDevice: 1200px;
$maxExtraLargeDevice: 1199.98px;

/* dark and light colours don't have enough contrast between them for text, so don't use them that way! Use black text on light, or (check contrast) white text on dark*/
$successLightColor: #cbedbd;
$successDarkColor: #45a64d;
$failLightColor: $highlightPaleColor;
$failDarkColor: $highlightColor;
$warnLightColor: #ffecce;
$warnDarkColor: #fdb84c;
$infoLightColor: #f2f6fc;
$infoDarkColor: $buttonPrimaryColor; // setting these to so we don't have too many shades of blue, if the buttons change colour this should be set to a nice "info" blue

$fontFamily: "Roboto", sans-serif;
$lightFontWeight: 300;
$mediumFontWeight: 400;
$heavyFontWeight: 700;

$standardBorderRadius: 10px;

:export {
  primaryColor: $primaryColor;
  secondaryColor: $secondaryColor;
  tertiaryColor: $tertiaryColor;

  backgroundColor: $backgroundColor;
  highlightColor: $highlightColor;
  separatorColor: $separatorColor;

  buttonPrimaryColor: $buttonPrimaryColor;
  buttonSecondaryColor: $buttonSecondaryColor;

  textColor: $textColor;
  textLightColor: $textLightColor;
  textGreen: $textGreen;
  textRed: $textRed;

  linkColor: $linkColor;
  linkFocusColor: $linkFocusColor;
  linkVisitedColor: $linkVisitedColor;

  highlightPaleColor: $highlightPaleColor;
  highlightOrangeColor: $highlightOrangeColor;
  highlightDarkColor: $highlightDarkColor;

  minSmallDevice: $minSmallDevice;
  minMediumDevice: $minMediumDevice;
  minLargeDevice: $minLargeDevice;
  minExtraLargeDevice: $minExtraLargeDevice;
  maxSmallDevice: $maxSmallDevice;
  maxMediumDevice: $maxMediumDevice;
  maxLargeDevice: $maxLargeDevice;
  maxExtraLargeDevice: $maxExtraLargeDevice;

  successLightColor: $successLightColor;
  successDarkColor: $successDarkColor;
  failLightColor: $failLightColor;
  failDarkColor: $failDarkColor;
  warnLightColor: $warnLightColor;
  warnDarkColor: $warnDarkColor;
  infoLightColor: $infoLightColor;
  infoDarkColor: $infoDarkColor;

  fontFamily: $fontFamily;
  lightFontWeight: $lightFontWeight;
  mediumFontWeight: $mediumFontWeight;
  heavyFontWeight: $heavyFontWeight;

  standardBorderRadius: $standardBorderRadius;
}

@mixin unstyled-button {
  text-align: left;
  border: none;
  background-color: inherit;
  outline: none;
  padding: 0;
  border-radius: 0;
}

@mixin unstyled-list {
  padding-left: 0;
  list-style: none;
  & > li {
    padding-left: 0;
    list-style: none;
  }
}
@mixin unstyled-link {
  &,
  &:link,
  &:visited,
  &:hover,
  &:focus {
    color: inherit;
    text-decoration: inherit;
  }
}

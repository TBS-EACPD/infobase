diff --git a/node_modules/css-modules-typescript-loader/index.js b/node_modules/css-modules-typescript-loader/index.js
index c1df2d3..08a00ed 100644
--- a/node_modules/css-modules-typescript-loader/index.js
+++ b/node_modules/css-modules-typescript-loader/index.js
@@ -1,12 +1,13 @@
-const fs = require('fs');
-const path = require('path');
-const loaderUtils = require('loader-utils');
-const LineDiff = require('line-diff');
+const fs = require("fs");
+const path = require("path");
 
-const bannerMessage =
-  '// This file is automatically generated.\n// Please do not change this file!';
+const LineDiff = require("line-diff");
+const loaderUtils = require("loader-utils");
+
+const _ = require("lodash");
 
-const cssModuleExport = 'export const cssExports: CssExports;\nexport default cssExports;\n';
+const bannerMessage =
+  "// This file is automatically generated.\n// Please do not change this file!";
 
 const getNoDeclarationFileError = ({ filename }) =>
   new Error(
@@ -14,29 +15,23 @@ const getNoDeclarationFileError = ({ filename }) =>
   );
 
 const getTypeMismatchError = ({ filename, expected, actual }) => {
-  const diff = new LineDiff(enforceLFLineSeparators(actual), expected).toString();
+  const diff = new LineDiff(
+    enforceLFLineSeparators(actual),
+    expected
+  ).toString();
 
   return new Error(
     `Generated type declaration file is outdated. Run webpack and commit the updated type declaration for '${filename}'\n\n${diff}`
   );
 };
 
-const cssModuleToInterface = (cssModuleKeys) => {
-  const interfaceFields = cssModuleKeys
-    .sort()
-    .map(key => `  '${key}': string;`)
-    .join('\n');
-
-  return `interface CssExports {\n${interfaceFields}\n}`;
-};
-
-const filenameToTypingsFilename = filename => {
+const filenameToTypingsFilename = (filename) => {
   const dirName = path.dirname(filename);
   const baseName = path.basename(filename);
   return path.join(dirName, `${baseName}.d.ts`);
 };
 
-const enforceLFLineSeparators = text => {
+const enforceLFLineSeparators = (text) => {
   if (text) {
     // replace all CRLFs (Windows) by LFs (Unix)
     return text.replace(/\r\n/g, "\n");
@@ -46,37 +41,31 @@ const enforceLFLineSeparators = text => {
 };
 
 const compareText = (contentA, contentB) => {
-  return enforceLFLineSeparators(contentA) === enforceLFLineSeparators(contentB);
+  return (
+    enforceLFLineSeparators(contentA) === enforceLFLineSeparators(contentB)
+  );
 };
 
-const validModes = ['emit', 'verify'];
+const validModes = ["emit", "verify"];
 
-const isFileNotFound = err => err && err.code === 'ENOENT';
+const isFileNotFound = (err) => err && err.code === "ENOENT";
 
 const makeDoneHandlers = (callback, content, rest) => ({
-  failed: e => callback(e),
-  success: () => callback(null, content, ...rest)
+  failed: (e) => callback(e),
+  success: () => callback(null, content, ...rest),
 });
 
-const makeFileHandlers = filename => ({
-  read: handler => fs.readFile(filename, { encoding: 'utf-8' }, handler),
+const makeFileHandlers = (filename) => ({
+  read: (handler) => fs.readFile(filename, { encoding: "utf-8" }, handler),
   write: (content, handler) =>
-    fs.writeFile(filename, content, { encoding: 'utf-8' }, handler)
+    fs.writeFile(filename, content, { encoding: "utf-8" }, handler),
 });
 
-const extractLocalExports = (content) => {
-  let localExports = content.split('exports.locals')[1];
-  if (!localExports) {
-    localExports = content.split('___CSS_LOADER_EXPORT___.locals')[1];
-  }
-  return localExports;
-}
-
-module.exports = function(content, ...rest) {
+module.exports = function (content, ...rest) {
   const { failed, success } = makeDoneHandlers(this.async(), content, rest);
 
   const filename = this.resourcePath;
-  const { mode = 'emit' } = loaderUtils.getOptions(this) || {};
+  const { mode = "emit" } = loaderUtils.getOptions(this) || {};
   if (!validModes.includes(mode)) {
     return failed(new Error(`Invalid mode option: ${mode}`));
   }
@@ -84,26 +73,24 @@ module.exports = function(content, ...rest) {
   const cssModuleInterfaceFilename = filenameToTypingsFilename(filename);
   const { read, write } = makeFileHandlers(cssModuleInterfaceFilename);
 
-  const keyRegex = /"([^\\"]+)":/g;
-  let match;
-  const cssModuleKeys = [];
-
-  const localExports = extractLocalExports(content);
+  const export_pattern = /^export (?:var|const) (.*?)(?: |=|\n).*$/;
+  const typeDeclarations = _.chain(content)
+    .split("\n")
+    .filter((line) => export_pattern.test(line))
+    .map((export_line) =>
+      export_line.replace(export_pattern, "export const $1: string;")
+    )
+    .join("\n")
+    .value();
 
-  while ((match = keyRegex.exec(localExports))) {
-    if (cssModuleKeys.indexOf(match[1]) < 0) {
-      cssModuleKeys.push(match[1]);
-    }
-  }
-
-  const cssModuleDefinition = `${bannerMessage}\n${cssModuleToInterface(cssModuleKeys)}\n${cssModuleExport}`;
+  const cssModuleDefinition = `${bannerMessage}\n${typeDeclarations}`;
 
-  if (mode === 'verify') {
+  if (mode === "verify") {
     read((err, fileContents) => {
       if (isFileNotFound(err)) {
         return failed(
           getNoDeclarationFileError({
-            filename: cssModuleInterfaceFilename
+            filename: cssModuleInterfaceFilename,
           })
         );
       }
@@ -117,7 +104,7 @@ module.exports = function(content, ...rest) {
           getTypeMismatchError({
             filename: cssModuleInterfaceFilename,
             expected: cssModuleDefinition,
-            actual: fileContents
+            actual: fileContents,
           })
         );
       }
@@ -127,7 +114,7 @@ module.exports = function(content, ...rest) {
   } else {
     read((_, fileContents) => {
       if (!compareText(cssModuleDefinition, fileContents)) {
-        write(cssModuleDefinition, err => {
+        write(cssModuleDefinition, (err) => {
           if (err) {
             failed(err);
           } else {

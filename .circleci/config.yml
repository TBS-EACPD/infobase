dockerhub_auth: &dockerhub_auth
  auth:
    username: $DOCKERHUB_USERNAME
    password: $DOCKERHUB_PASSWORD

# yaml fragment for deploy filters
deploy_filter: &deploy_filter 
  filters:
    branches:
      ignore:
        - /__.*/


version: 2
jobs:

  # Note: the image used for this job is built from a docker file found in ../dockerfiles/build
  test_email_backend:
    docker:
      - image: eaadtbs/ib-ci-build:v1.2
        <<: *dockerhub_auth
    working_directory: "~/InfoBase"
    steps:
      - checkout:
          path: "~/InfoBase"
      - restore_cache:
          keys:
            - email-backend-dependencies-{{ checksum "email_backend/package-lock.json" }}
            - top-level-dependencies-{{ checksum "package-lock.json" }}
      - run: 
          command: |
            [ -e "email_backend/node_modules" ] || (cd email_backend && npm ci)
      - run: 
          command: |
            [ -e "node_modules" ] || npm ci
      - save_cache:
          paths:
            - email_backend/node_modules
            - scripts/common_node_scripts/node_modules
          key: email-backend-dependencies-{{ checksum "email_backend/package-lock.json" }}
      - save_cache:
          paths:
            - node_modules
          key: top-level-dependencies-{{ checksum "package-lock.json" }}

      - run: npm run check_format email_backend
      - run: (cd email_backend && npm run unit_tests)

      - run: (cd email_backend && npm run end_to_end_tests)

     # halt here if not on the true repo, expected that means this is running in an env without the GCloud env vars required for the following steps
      - run: if [[ "$CIRCLE_PROJECT_REPONAME" != "infobase" ]]; then circleci step halt; fi

      - run: (cd email_backend && npm run merge_coverage_reports && npm run create_coverage_shield_badge)
      
      - run: ./scripts/ci_scripts/authenticate-server-gcloud.sh
      - run: (cd email_backend && ../scripts/ci_scripts/store_project_coverage.sh email_backend)


  # Note: the image used for this job is built from a docker file found in ../dockerfiles/build
  cleanup_dev_links:
    docker:
      - image: eaadtbs/ib-ci-test:v1.1
        <<: *dockerhub_auth
    working_directory: "~/InfoBase"
    steps:
      - checkout:
          path: "~/InfoBase"
      - run: ./scripts/ci_scripts/create_envs.sh

      - run: ./scripts/ci_scripts/authenticate-client-gcloud.sh

      # only let this job run in the true repo
      - run: if [ "$CIRCLE_PROJECT_REPONAME" != "infobase" ]; then circleci-agent step halt; fi

      - run:
          command: git branch -r > ./active-branches.txt

      # Use checksum of branch list to tell if the dev DBs need to be cleaned up
      - restore_cache:
          keys:
            - dev-dbs-clean-for-these-branches--{{ checksum "./active-branches.txt" }}
      - run:
          command: |
            if [ ! -f "./dev-dbs-clean-for-these-branches.txt" ]; then
              ./scripts/ci_scripts/cleanup_dev_dbs.sh
              ./scripts/ci_scripts/cleanup_dev_links.sh
            fi
      - run: touch ./dev-dbs-clean-for-these-branches.txt
      - save_cache:
          paths:
            - ./dev-dbs-clean-for-these-branches.txt
          key: dev-dbs-clean-for-these-branches--{{ checksum "./active-branches.txt" }}
  axe:
    working_directory: "~/InfoBase"
    docker:
      - image: markhobson/node-chrome:latest
        <<: *dockerhub_auth
    steps:
      - checkout:
          path: "~/InfoBase"
      - run: npm install @axe-core/cli -g --unsafe-perm=true --allow-root
      - run: axe https://dev.ea-ad.ca/master/index-eng.html#about --disable color-contrast

  lighthouse:
    working_directory: "~/InfoBase"
    docker:
      - image: markhobson/node-chrome:latest
        <<: *dockerhub_auth
    steps:
      - checkout:
          path: "~/InfoBase"
      - run: ./scripts/ci_scripts/setup_lighthouse_env.sh
      - run: ./scripts/ci_scripts/cleanup_lighthouse_db.sh
      - run:
          name: lhci autorun
          command: node ./node_modules/@lhci/cli/src/cli.js autorun --config ./scripts/ci_scripts/lighthouserc.js


  # Note: the image used for this job is built from a docker file found in ../dockerfiles/build
  build:
    docker:
      - image: eaadtbs/ib-ci-build:1.3
        <<: *dockerhub_auth
    working_directory: "~/InfoBase"
    steps:
      - checkout:
          path: "~/InfoBase"

      - restore_cache:
          keys:
            - top-level-dependencies-{{ checksum "package-lock.json" }}
      - run: 
          command: |
            [ -e "node_modules" ] ||  npm ci
      - save_cache:
          paths:
            - node_modules
          key: top-level-dependencies-{{ checksum "package-lock.json" }}

      - run: ./scripts/ci_scripts/create_envs.sh

      - restore_cache:
          keys:
            - client-dependencies-{{ checksum "client/package-lock.json" }}
      - run: 
          command: |
            [ -e "client/node_modules" ] || (cd client && npm ci)
      - save_cache:
          paths:
            - client/node_modules
            - scripts/common_node_scripts/node_modules
          key: client-dependencies-{{ checksum "client/package-lock.json" }}

      - run: ./scripts/ci_scripts/get_bundle_stats_baseline.sh

      - run: # logging memory usage, build job capable of maxing out the memory available in CircleCI
          command: |
            while true; do
              sleep 5
              echo "====="
              ps -eo comm,vsz,rss | sort -k 3 -nr
              echo "====="
            done 
          background: true

      - restore_cache:
          keys:
            - prod-build-{{ .Branch }}-{{ .Revision }}
      - run:
          command: |
            [ -f "client/$BUILD_DIR/InfoBase/app/app-a11y-en.min.js" ] || (cd client && ./deploy_scripts/build_all.sh -m 256 -c "none")
      - save_cache:
          paths:
            - client/build
          key: prod-build-{{ .Branch }}-{{ .Revision }}

      - restore_cache:
          keys:
            - server-dependencies-{{ checksum "server/package-lock.json" }}
      - run: 
          command: |
            [ -e "server/node_modules" ] || (cd server && npm ci)
      - save_cache:
          paths:
            - server/node_modules
            - scripts/common_node_scripts/node_modules
          key: server-dependencies-{{ checksum "server/package-lock.json" }}
      - restore_cache:
          keys:
            - server-transpiled-build-{{ .Branch }}-{{ .Revision }}
      - run:
          command: |
            [ -f "server/transpiled_build/app.js" ] || (cd server && npm run build)
      - save_cache:
          paths:
            - server/transpiled_build
          key: server-transpiled-build-{{ .Branch }}-{{ .Revision }}

      - persist_to_workspace:
          root: ./
          paths:
            - ./node_modules
            - ./scripts

            - ./data
            - ./test-data
            - ./package.json
            - ./.prettierignore
            - ./prettier.config.js
            
            - ./client/build
            - ./client/browser-tests
            - ./client/deploy_scripts
            - ./client/node_modules
            - ./client/package.json

            - ./server/transpiled_build
            - ./server/src
            - ./server/deploy_scripts
            - ./server/.gcloudignore
            - ./server/jest_configs
            - ./server/node_modules
            - ./server/package.json
            - ./server/package-lock.json
            - ./server/.babelrc


  # Note: the image used for this job is built from a docker file found in ../dockerfiles/test
  test_server:
    docker:
      - image: eaadtbs/ib-ci-test:v1.1
        <<: *dockerhub_auth
    working_directory: "~/InfoBase"
    steps:
      - attach_workspace:
          at: ./
      - run: ./scripts/ci_scripts/create_envs.sh

      - run: npm run check_format server

      - run: (cd server && npm run unit_tests)

      - run: 
          name: mongod
          command: mongod
          background: true
      - run: 
          name: start_api_server
          command: (cd server && npm run start)
          background: true
      - run: (cd server && npm run snapshot_tests) # the end to end snapshot tests, run against un-transpiled src for more useful coverage stats

      # halt here if not on the true repo, expected that means this is running in an env without the GCloud env vars required for the following steps
      - run: if [[ "$CIRCLE_PROJECT_REPONAME" != "infobase" ]]; then circleci step halt; fi

      - run: (cd server && npm run merge_coverage_reports && npm run create_coverage_shield_badge)

      - run: ./scripts/ci_scripts/authenticate-server-gcloud.sh
      - run: (cd server && ../scripts/ci_scripts/store_project_coverage.sh server)
      

  # Note: the image used for this job is built from a docker file found in ../dockerfiles/test
  test_end_to_end: # slower but more in-depth than the test job. Wait until these have passed before deploying the client
    docker:
      - image: eaadtbs/ib-ci-test:1.2
        <<: *dockerhub_auth
    working_directory: "~/InfoBase"
    steps:
      - attach_workspace:
          at: ./
      - run: ./scripts/ci_scripts/create_envs.sh

      # repeats some of the server tests, because these fail fast and short-curcuit us before the long-running browser tests
      - run: (cd server && npm run unit_tests)
      
      - run: npm run check_format client
      - run: 
          name: mongod
          command: mongod
          background: true
      - run: 
          name: start_api_server
          command: (cd server && npm run start:transpiled) # run server end to end tests against the transpiled src, to be closer to production
          background: true
      - run: (cd server && export TEST_AGAINST_TRANSPILIED='true' && npm run snapshot_tests)

      - run: sed -i "s#${CDN_URL}#.#g" ./client/$BUILD_DIR/InfoBase/app/*.js # Replace the CDN_URL instances in the built InfoBase so the tests will get the right files (ie. NOT just test the previous deploy)
      - run: sed -i "s#${CDN_URL}#.#g" ./client/$BUILD_DIR/InfoBase/*.html # Replace the CDN_URL instances in the built InfoBase so the tests will get the right files (ie. NOT just test the previous deploy)
      - run: sed -i "s#hacky_target_text_for_ci_to_replace_with_test_and_deploy_time_api_urls#http://127.0.0.1:1337/graphql#g" ./client/$BUILD_DIR/InfoBase/app/*.js # Replace CI API URL placeholder with local URL so these tests use the local server
      - run: 
          name: start_http_server
          command: (cd client && npm run ci_serve)
          background: true
      - run: (cd client && npm run ci_route_load_tests)

      - run: circleci step halt # held open at this point by the running server, force halt (returns successful)


  # Note: the image used for this job is built from a docker file found in ../dockerfiles/test
  deploy_data:
    working_directory: "~/InfoBase"
    docker:
      - image: eaadtbs/ib-ci-test:v1.1
        <<: *dockerhub_auth
    steps:
      - attach_workspace:
          at: ./
      - run: ./scripts/ci_scripts/create_envs.sh

      # Checksum all files in data dir, used to determine if the database needs to be populated
      - run: cksum ./data/* > data-checksums.txt

      # Use this cached file to tell if the data needs to be loaded to mongodb (if on a new branch or if data has changed)
      - restore_cache:
          keys:
            - data-is-deployed-{{ .Branch }}-{{ checksum "./data-checksums.txt" }}
      - run:
          command: |
            [ -f "./this-data-is-deployed.txt" ] || (cd server && npm run populate_db:remote)
      - run: touch ./this-data-is-deployed.txt
      - save_cache:
          paths:
            - ./this-data-is-deployed.txt
          key: data-is-deployed--{{ .Branch }}-{{ checksum "./data-checksums.txt" }}


  # Note: the image used for this job is provided by google
  deploy_server:
    working_directory: "~/InfoBase"
    docker:
      - image: google/cloud-sdk:slim
    steps:
      - attach_workspace:
          at: ./
      - run: ./scripts/ci_scripts/create_envs.sh

      - run: ./scripts/ci_scripts/authenticate-server-gcloud.sh

      # Checksum all JS files in transpiled_build, used to determine if the function needs to be redeployed
      - run: find ./server/transpiled_build -name "*.js" | xargs cksum > server-checksums.txt

      # Use this cached file to tell if the api needs to be redeployed (if on a new branch, if function code's changed, or if server node modules have changed)
      - restore_cache:
          keys:
            - api-is-deployed-{{ .Branch }}-{{ checksum "./server-checksums.txt" }}-{{ checksum "./server/package-lock.json" }}
      - run:
          command: |
            [ -f "./this-api-is-deployed.txt" ] || (cd server && ./deploy_scripts/ci_deploy_function.sh)
      - run: touch ./this-api-is-deployed.txt
      - save_cache:
          paths:
            - ./this-api-is-deployed.txt
          key: api-is-deployed--{{ .Branch }}-{{ checksum "./server-checksums.txt" }}-{{ checksum "./server/package-lock.json" }}


  # Note: the image used for this job is provided by google
  deploy_client:
    working_directory: "~/InfoBase"
    docker:
      - image: google/cloud-sdk:slim
    steps:
      - attach_workspace:
          at: ./
      - run: ./scripts/ci_scripts/create_envs.sh
      - run: ./scripts/ci_scripts/authenticate-client-gcloud.sh
      - run: sed -i "s#hacky_target_text_for_ci_to_replace_with_test_and_deploy_time_api_urls#https://us-central1-ib-serverless-api-dev.cloudfunctions.net/$CIRCLE_BRANCH/graphql#g" ./client/$BUILD_DIR/InfoBase/app/*.js # Replace Replace CI API URL placeholder with branch specific API URL
      - run: (cd client && ./deploy_scripts/push_to_gcloud_bucket.sh)
      - run: if [[ $CIRCLE_BRANCH = master ]]; then ./scripts/ci_scripts/store_bundle_stats.sh; fi # only saving master stats right now since they're somewhat large files (~1 mb each)



workflows:
  version: 2
  test_email_backend:
    jobs:
      - test_email_backend

  cleanup_dev_links:
    jobs:
      - cleanup_dev_links:
          <<: *deploy_filter

  # One workflow that runs all three job stages (build -> test -> deploy_data/server/client), each stage requiring
  build_test_deploy:
    jobs:
      - axe
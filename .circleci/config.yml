# yaml fragment for auth using env var securely stored in CircleCI, needed to pull our GCloud hosted images
gcloud_auth: &gcloud_auth 
  auth:
    username: _json_key
    password: $GCLOUD_JSON_AUTH

# yaml fragment for list of branches to deploy dev builds on
deploy_filter: &deploy_filter 
  filters:
    branches:
      only:
        - master
        - api-cd

version: 2
jobs:

  # Note: the image used for this job is built from a docker file found in ../dockerfiles/build
  build:
    docker:
      - image: gcr.io/ib-static-content/ib-client-ci-build:latest
        <<: *gcloud_auth
    working_directory: "~/InfoBase"
    steps:
      - checkout:
          path: "~/InfoBase"
      - run: chmod +x ./ci_scripts/chmod_scripts.sh
      - run: ./ci_scripts/chmod_scripts.sh
      - run: ./ci_scripts/create_envs.sh

      - restore_cache:
          keys:
            - ib-client-dependencies-{{ checksum "client/package-lock.json" }}
      - run: 
          command: |
            [ -e "client/node_modules" ] || (cd client && npm ci)
      - save_cache:
          paths:
            - node_modules
          key: ib-client-dependencies-{{ checksum "client/package-lock.json" }}

      - restore_cache:
          keys:
            - ib-prod-build-{{ .Branch }}-{{ .Revision }}
      - run:
          command: |
            [ -f "client/build/InfoBase/app/app-a11y-en.min.js" ] || (cd client && ./deploy_build_scripts/build_all.sh)
      - save_cache:
          paths:
            - client/build
          key: ib-prod-build-{{ .Branch }}-{{ .Revision }}

      - restore_cache:
          keys:
            - ib-server-dependencies-{{ checksum "server/package-lock.json" }}
      - run: 
          command: |
            [ -e "server/node_modules" ] || (cd server && npm ci)
      - save_cache:
          paths:
            - node_modules
          key: ib-server-dependencies-{{ checksum "server/package-lock.json" }}
      - restore_cache:
          keys:
            - ib-server-transpiled-build-{{ .Branch }}-{{ .Revision }}
      - run:
          command: |
            [ -f "server/transpiled_build/app.js" ] || (cd server && npm run build)
      - save_cache:
          paths:
            - server/transpiled_build
          key: ib-server-transpiled-build-{{ .Branch }}-{{ .Revision }}

      - persist_to_workspace:
          root: ./
          paths:
            - ./ci_scripts

            - ./data
            - ./test-data
            
            - ./client/build
            - ./client/browser-tests
            - ./client/deploy_build_scripts
            - ./client/node_modules
            - ./client/package.json

            - ./server/transpiled_build
            - ./server/scripts
            - ./server/.gcloudignore
            - ./server/jest.config.js
            - ./server/node_modules
            - ./server/package.json

  
  # Note: the image used for this job is built from a docker file found in ../dockerfiles/test
  test:
    docker:
      - image: gcr.io/ib-static-content/ib-client-ci-test:latest
        <<: *gcloud_auth
    working_directory: "~/InfoBase"
    steps:
      - attach_workspace:
          at: ./
      - run: sh ./ci_scripts/create_envs.sh

      - run: 
          name: mongod
          command: mongod
          background: true
      - run: (cd server && npm run transpiled_load_models)
      - run: 
          name: start_api_server
          command: (cd server && npm run transpiled_start)
          background: true
      - run: sed -i "s#src#transpiled_build#g" ./server/jest.config.js # Switch the jest config from testing src to testing transpiled_build
      - run: (cd server && npm run test)

      - run: sed -i "s#${CDN_URL}#.#g" ./client/build/InfoBase/app/*.js # Replace the CDN_URL instances in the built InfoBase so the tests will get the right files (ie. NOT just test the previous deploy)
      - run: sed -i "s#${CDN_URL}#.#g" ./client/build/InfoBase/*.html # Replace the CDN_URL instances in the built InfoBase so the tests will get the right files (ie. NOT just test the previous deploy)
      - run: sed -i "s#https://us-central1-ib-serverless-api-dev.cloudfunctions.net/app/graphql#http://127.0.0.1:1337/graphql#g" ./client/build/InfoBase/app/*.js # Replace prod API URL with local URL so these tests use the local server
      - run: 
          name: start_http_server
          command: (cd client && npm run ci_serve)
          background: true
      - run: (cd client && npm run ci_route_load_tests)


  # Note: the image used for this job is built from a docker file found in ../dockerfiles/test
  deploy_data:
    working_directory: "~/InfoBase"
    docker:
      - image: gcr.io/ib-static-content/ib-client-ci-test:latest
        <<: *gcloud_auth
    steps:
      - attach_workspace:
          at: ./
      - run: ./ci_scripts/create_envs.sh
      - run: sh ./ci_scripts/create_deploy_envs.sh

      #TODO only if data has changed
      - run: (cd server && npm run transpiled_load_models)


  # Note: the image used for this job is provided by google
  deploy_server:
    working_directory: "~/InfoBase"
    docker:
      - image: google/cloud-sdk:slim
    steps:
      - attach_workspace:
          at: ./
      - run: ./ci_scripts/create_envs.sh
      - run: sh ./ci_scripts/create_deploy_envs.sh

      - run: ./ci_scripts/authenticate-server-gcloud.sh
      #TODO deploy gcloud func with branch-specific name, connecting to branch-specific database, only if trasnpilied build has changed


  # Note: the image used for this job is provided by google
  deploy_client:
    working_directory: "~/InfoBase"
    docker:
      - image: google/cloud-sdk:slim
    steps:
      - attach_workspace:
          at: ./
      - run: ./ci_scripts/create_envs.sh
      - run: ./ci_scripts/authenticate-client-gcloud.sh
      #TODO replace prod gcloud func api url with branch-specific url
      - run: (cd client && ./deploy_build_scripts/push_to_gcloud_bucket.sh)


# One workflow that runs all three jobs (build -> test -> deploy_data/server/client), each requiring the previous to have passed
# Note that deploy steps are filtered by branch to only run on master
workflows:
  version: 2
  build_test_deploy:
    jobs:
      - build
      - test:
          requires:
            - build
      - deploy_data:
          requires:
            - test
          <<: *deploy_filter
      - deploy_server:
          requires:
            - deploy_data
          <<: *deploy_filter
      - deploy_client:
          requires:
            - deploy_server
          <<: *deploy_filter
